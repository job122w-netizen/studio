{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile in the Desaf√≠o HV app.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "username": {
          "type": "string",
          "description": "The user's display name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "joinDate": {
          "type": "string",
          "description": "The date the user joined the app.",
          "format": "date-time"
        },
        "totalPoints": {
          "type": "number",
          "description": "The user's total points accumulated in the app."
        },
        "paseHVId": {
          "type": "string",
          "description": "Reference to PaseHV. (Relationship: UserProfile 1:1 PaseHV)"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "joinDate"
      ]
    },
    "StudySession": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StudySession",
      "type": "object",
      "description": "Represents a study session recorded by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the study session."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N StudySession)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the study session.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the study session.",
          "format": "date-time"
        },
        "durationMinutes": {
          "type": "number",
          "description": "The duration of the study session in minutes."
        }
      },
      "required": [
        "id",
        "userId",
        "startTime",
        "endTime",
        "durationMinutes"
      ]
    },
    "Exercise": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Exercise",
      "type": "object",
      "description": "Represents an exercise or activity for personal development.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the exercise."
        },
        "title": {
          "type": "string",
          "description": "The title of the exercise."
        },
        "description": {
          "type": "string",
          "description": "A description of the exercise and its purpose."
        },
        "category": {
          "type": "string",
          "description": "The category of the exercise (e.g., mindfulness, productivity)."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "category"
      ]
    },
    "UserExercise": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserExercise",
      "type": "object",
      "description": "Represents a user's interaction with an exercise.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user exercise record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N UserExercise)"
        },
        "exerciseId": {
          "type": "string",
          "description": "Reference to Exercise. (Relationship: Exercise 1:N UserExercise)"
        },
        "completionDate": {
          "type": "string",
          "description": "The date the user completed the exercise.",
          "format": "date-time"
        },
        "notes": {
          "type": "string",
          "description": "Optional notes or reflections on the exercise."
        }
      },
      "required": [
        "id",
        "userId",
        "exerciseId",
        "completionDate"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product available in the virtual store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "A description of the product."
        },
        "price": {
          "type": "number",
          "description": "The price of the product in points."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product's image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price"
      ]
    },
    "Purchase": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Purchase",
      "type": "object",
      "description": "Represents a user's purchase of a product.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the purchase."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Purchase)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N Purchase)"
        },
        "purchaseDate": {
          "type": "string",
          "description": "The date of the purchase.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "productId",
        "purchaseDate"
      ]
    },
    "PaseHV": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PaseHV",
      "type": "object",
      "description": "Represents the PaseHV subscription.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the PaseHV subscription."
        },
        "name": {
          "type": "string",
          "description": "The name of the subscription tier."
        },
        "description": {
          "type": "string",
          "description": "A description of the benefits of the subscription."
        },
        "price": {
          "type": "number",
          "description": "The price of the subscription."
        },
        "durationDays": {
          "type": "number",
          "description": "The duration of the subscription in days."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "durationDays"
      ]
    },
    "CasinoGame": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CasinoGame",
      "type": "object",
      "description": "Represents a game in the casino section.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the casino game."
        },
        "name": {
          "type": "string",
          "description": "The name of the casino game."
        },
        "description": {
          "type": "string",
          "description": "A description of how to play the game."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "GamePlay": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GamePlay",
      "type": "object",
      "description": "Represents a user's game play record in the casino.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the game play record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N GamePlay)"
        },
        "gameId": {
          "type": "string",
          "description": "Reference to CasinoGame. (Relationship: CasinoGame 1:N GamePlay)"
        },
        "playDate": {
          "type": "string",
          "description": "The date and time the game was played.",
          "format": "date-time"
        },
        "pointsBet": {
          "type": "number",
          "description": "The number of points the user bet on the game."
        },
        "pointsWon": {
          "type": "number",
          "description": "The number of points the user won in the game."
        }
      },
      "required": [
        "id",
        "userId",
        "gameId",
        "playDate",
        "pointsBet",
        "pointsWon"
      ]
    },
    "Ranking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ranking",
      "type": "object",
      "description": "Represents the ranking of users based on their total points.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ranking entry."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:1 Ranking)"
        },
        "rank": {
          "type": "number",
          "description": "The user's rank in the ranking."
        },
        "totalPoints": {
          "type": "number",
          "description": "The user's total points used for ranking."
        },
        "lastUpdated": {
          "type": "string",
          "description": "The last time the ranking was updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "rank",
        "totalPoints",
        "lastUpdated"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/userProfile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile data. Uses path-based ownership; only the authenticated user can access their profile (userId is derived from request.auth.uid).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/studySessions/{studySessionId}",
        "definition": {
          "entityName": "StudySession",
          "schema": {
            "$ref": "#/backend/entities/StudySession"
          },
          "description": "Stores study session data. Uses path-based ownership; only the user can create, read, update, and delete their own study sessions (userId is derived from request.auth.uid).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "studySessionId",
              "description": "The unique identifier of the study session."
            }
          ]
        }
      },
      {
        "path": "/exercises/{exerciseId}",
        "definition": {
          "entityName": "Exercise",
          "schema": {
            "$ref": "#/backend/entities/Exercise"
          },
          "description": "Stores exercise data available to all users. This collection is separate from user-specific data.",
          "params": [
            {
              "name": "exerciseId",
              "description": "The unique identifier of the exercise."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/userExercises/{userExerciseId}",
        "definition": {
          "entityName": "UserExercise",
          "schema": {
            "$ref": "#/backend/entities/UserExercise"
          },
          "description": "Stores user-specific exercise data, indicating which exercises a user has completed. Uses path-based ownership (userId is derived from request.auth.uid).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "userExerciseId",
              "description": "The unique identifier of the user exercise."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product data for the virtual store. This collection is separate from user-specific data.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier of the product."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/purchases/{purchaseId}",
        "definition": {
          "entityName": "Purchase",
          "schema": {
            "$ref": "#/backend/entities/Purchase"
          },
          "description": "Stores purchase history for each user, linking to products. Uses path-based ownership (userId is derived from request.auth.uid).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "purchaseId",
              "description": "The unique identifier of the purchase."
            }
          ]
        }
      },
      {
        "path": "/paseHV/{paseHVId}",
        "definition": {
          "entityName": "PaseHV",
          "schema": {
            "$ref": "#/backend/entities/PaseHV"
          },
          "description": "Stores the different PaseHV subscription tiers. This collection is separate from user-specific data.",
          "params": [
            {
              "name": "paseHVId",
              "description": "The unique identifier of the PaseHV subscription."
            }
          ]
        }
      },
      {
        "path": "/casinoGames/{casinoGameId}",
        "definition": {
          "entityName": "CasinoGame",
          "schema": {
            "$ref": "#/backend/entities/CasinoGame"
          },
          "description": "Stores information about the casino games. This collection is separate from user-specific data.",
          "params": [
            {
              "name": "casinoGameId",
              "description": "The unique identifier of the casino game."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/gamePlays/{gamePlayId}",
        "definition": {
          "entityName": "GamePlay",
          "schema": {
            "$ref": "#/backend/entities/GamePlay"
          },
          "description": "Stores the gameplay history for each user. Uses path-based ownership (userId is derived from request.auth.uid).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "gamePlayId",
              "description": "The unique identifier of the game play."
            }
          ]
        }
      },
      {
        "path": "/rankings/{rankingId}",
        "definition": {
          "entityName": "Ranking",
          "schema": {
            "$ref": "#/backend/entities/Ranking"
          },
          "description": "Stores the ranking of users based on their total points. Each document represents the ranking for a single user (1:1 relationship).",
          "params": [
            {
              "name": "rankingId",
              "description": "The unique identifier of the ranking."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to reflect the core features of the 'Desaf√≠o HV' app, focusing on user profiles, study sessions, exercises, a virtual store, a subscription service (PaseHV), casino games, and a ranking system. The structure emphasizes authorization independence and supports the required QAPs by using path-based ownership for user-specific data and structural segregation for different data access needs.\n\n*   **/users/{userId}/userProfile:** Stores user profile data. This uses path-based ownership. It enables simple security rules where only the authenticated user can access their own profile. This also supports QAPs by ensuring that list operations are always scoped to a single user. The `userId` is derived from `request.auth.uid`.\n*   **/users/{userId}/studySessions/{studySessionId}**: Stores study session data. This uses path-based ownership. Only the user can create, read, update, and delete their own study sessions. This structure supports QAPs by ensuring list operations are scoped to a single user.  The `userId` is derived from `request.auth.uid`.\n*   **/exercises/{exerciseId}**: Stores exercise data available to all users. This collection is separate from user-specific data, enabling different security rules. This supports QAPs because listing exercises doesn't require filtering based on user-specific permissions. The `exercises` collection can be made publicly readable.\n*   **/users/{userId}/userExercises/{userExerciseId}**: Stores user-specific exercise data, indicating which exercises a user has completed. This uses path-based ownership and ensures that only the user can access their own exercise records. This structure supports QAPs by ensuring that list operations are scoped to a single user. The `userId` is derived from `request.auth.uid`.\n*   **/products/{productId}**: Stores product data for the virtual store. This collection is separate from user-specific data. It can be made publicly readable.\n*   **/users/{userId}/purchases/{purchaseId}**: Stores purchase history for each user, linking to products. This uses path-based ownership. This structure supports QAPs because listing purchases is scoped to a single user. The `userId` is derived from `request.auth.uid`.\n*   **/paseHV/{paseHVId}**: Stores the different PaseHV subscription tiers. This collection can be made publicly readable. This structure supports QAPs because listing PaseHV subscriptions doesn't require user-specific permissions.\n*   **/casinoGames/{casinoGameId}**: Stores information about the casino games. This collection is separate from user-specific data, enabling different security rules. This supports QAPs because listing casino games doesn't require filtering based on user-specific permissions. The `casinoGames` collection can be made publicly readable.\n*   **/users/{userId}/gamePlays/{gamePlayId}**: Stores the gameplay history for each user. This uses path-based ownership, ensuring only the user can access their own gameplay records. This structure supports QAPs because listing gamePlays is scoped to a single user. The `userId` is derived from `request.auth.uid`.\n*   **/rankings/{rankingId}**: Stores the ranking of users based on their total points.  Each document in the `rankings` collection represents the ranking for a single user (1:1 relationship). It can be made publicly readable."
  }
}