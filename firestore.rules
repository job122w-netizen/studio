rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects private user profile data.
     * @path /users/{userId}
     * @allow (create, update, delete): Authenticated user with matching UID.
     * @deny (create, update, delete): Mismatched UID or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows a user to read their own profile data.
      allow get: if isOwner(userId);
      // Disallows listing of all user profiles.
      allow list: if false;

      // Allows a user to create their own profile if the userId matches their auth.uid.
      allow create: if isSignedIn() && request.auth.uid == userId;
      // Allows a user to update their own profile if the userId matches their auth.uid.
      allow update: if isExistingOwner(userId);
      // Allows a user to delete their own profile if the userId matches their auth.uid.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects study session data for a specific user.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create, update, delete): Authenticated user with matching UID.
     * @deny (create, update, delete): Mismatched UID or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects a user's weekly exercise routine for a specific day of the week.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create, update, delete): Authenticated user with matching UID.
     * @deny (create, update, delete): Mismatched UID or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects information about a user's completion of an exercise.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create, update, delete): Authenticated user with matching UID.
     * @deny (create, update, delete): Mismatched UID or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores a list of available store items. Publicly readable.
     * @path /storeItems/{storeItemId}
     * @allow (get, list): Any user can read the store items.
     * @deny (create, update, delete): No user can create, update, or delete store items.
     * @principle Public read access with restricted writes.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects information about items owned by a user.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create, update, delete): Authenticated user with matching UID.
     * @deny (create, update, delete): Mismatched UID or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userItems/{userItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores the definition of the HV Pass rewards for version 1. Publicly readable.
     * @path /hvPass/v1
     * @allow (get, list): Any user can read the HV Pass rewards.
     * @deny (create, update, delete): No user can create, update, or delete HV Pass rewards.
     * @principle Public read access with restricted writes.
     */
    match /hvPass/v1 {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description List of all available profile backgrounds. Publicly readable.
     * @path /profileBackgrounds/{backgroundId}
     * @allow (get, list): Any user can read the profile backgrounds.
     * @deny (create, update, delete): No user can create, update, or delete profile backgrounds.
     * @principle Public read access with restricted writes.
     */
     match /profileBackgrounds/{backgroundId} {
        allow get: if true;
        allow list: if true;

        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description List of all available app color themes. Publicly readable.
     * @path /colorThemes/{themeId}
     * @allow (get, list): Any user can read the color themes.
     * @deny (create, update, delete): No user can create, update, or delete color themes.
     * @principle Public read access with restricted writes.
     */
     match /colorThemes/{themeId} {
        allow get: if true;
        allow list: if true;

        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Stores casino game history for a user.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create, update, delete): Authenticated user with matching UID.
     * @deny (create, update, delete): Mismatched UID or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores public-facing ranking data for each user.
     * @path /rankings/{userId}
     * @allow (get, list): Any user can read the rankings.
     * @allow (create, update): Authenticated user with matching UID.
     * @deny (create, update): Mismatched UID or unauthenticated user.
     * @deny delete: No user can delete ranking data.
     * @principle Public read access with owner-only writes.
     */
    match /rankings/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }
  }
}