/**
 * @file Firestore Security Rules for Desaf√≠o HV App
 *
 * @corePhilosophy
 * This ruleset enforces a strict user-ownership model for personal data, while allowing public read access to certain shared resources.
 * User data is stored under the `/users/{userId}` path, and access is generally restricted to the authenticated user.
 *
 * @dataStructure
 * The Firestore database is structured as follows:
 * - `/users/{userId}`: User profiles, accessible only by the owning user.
 * - `/users/{userId}/studySessions/{studySessionId}`: Study sessions for a specific user.
 * - `/users/{userId}/weeklyRoutine/{dayId}`: Weekly exercise routines for a user.
 * - `/users/{userId}/userExercises/{userExerciseId}`: Exercise completion data for a user.
 * - `/users/{userId}/userItems/{userItemId}`: Items owned by a user.
 * - `/users/{userId}/casinoGames/{casinoGameId}`: Casino game history for a user.
 * - `/storeItems/{storeItemId}`: Public list of available store items.
 * - `/hvPass/v1`: Definition of the HV Pass (public read).
 * - `/profileBackgrounds/{backgroundId}`: Public list of available profile backgrounds.
 * - `/rankings/{rankingId}`: Global ranking information (public read).
 *
 * @keySecurityDecisions
 * - Users can only access their own profile data and associated subcollections.
 * - Public read access is granted to store items, HV Pass definitions, profile backgrounds, and rankings.
 * - Listing the `/users` collection is explicitly denied. This protects against user enumeration.
 * - The rules prioritize security and data ownership. Schema validation is relaxed for rapid prototyping.
 *
 * @denormalizationForAuthorization
 *  N/A - No explicit denormalization is used in this ruleset as data needed for authorization is directly available in the documents or paths.
 *
 * @structuralSegregation
 * Public (store items, HV Pass, rankings) and private (user data) content are stored in separate top-level collections to avoid the need for complex filtering rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects against listing all users in the 'users' collection.
     * @path /users
     * @allow (get) Allowed for anyone to retrieve a specific user profile.
     * @deny (list) Denied for everyone, preventing user enumeration.
     * @principle Prevents unauthorized listing of user profiles.
     */
    match /users {
      allow get: if true;
      allow list: if false; // Explicitly deny listing all users.
    }

    /**
     * @description Manages access to individual user profiles.
     * @path /users/{userId}
     * @allow (create) Allowed for a user to create their own profile (self-registration).
     * @allow (get, list) Allowed for a user to read their own profile.
     * @allow (update, delete) Allowed for a user to update or delete their own profile.
     * @deny Any operation by a different user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to study sessions for a specific user.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create, get, list, update, delete) Allowed for the owner of the user profile.
     * @deny Any operation by a different user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to weekly routines for a specific user.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create, get, list, update, delete) Allowed for the owner of the user profile.
     * @deny Any operation by a different user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to user exercises for a specific user.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create, get, list, update, delete) Allowed for the owner of the user profile.
     * @deny Any operation by a different user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to user items for a specific user.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create, get, list, update, delete) Allowed for the owner of the user profile.
     * @deny Any operation by a different user.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/userItems/{userItemId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

      /**
       * @description Manages access to casino games history for a specific user.
       * @path /users/{userId}/casinoGames/{casinoGameId}
       * @allow (create, get, list, update, delete) Allowed for the owner of the user profile.
       * @deny Any operation by a different user.
       * @principle Restricts access to a user's own data tree.
       */
      match /users/{userId}/casinoGames/{casinoGameId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
      }

    /**
     * @description Allows public read access to store items, but restricts write access.
     * @path /storeItems/{storeItemId}
     * @allow (get, list) Allowed for anyone to browse available items.
     * @deny (create, update, delete) Write operations are not permitted in this prototype.
     * @principle Public read with owner-only writes (currently write-protected).
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to the HV Pass definition.
     * @path /hvPass/v1
     * @allow (get, list) Allowed for anyone to view the pass definition.
     * @deny (create, update, delete) Write operations are not permitted in this prototype.
     * @principle Public read, restricted writes.
     */
    match /hvPass/v1 {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to available profile backgrounds.
     * @path /profileBackgrounds/{backgroundId}
     * @allow (get, list) Allowed for anyone to browse available backgrounds.
     * @deny (create, update, delete) Write operations are not permitted in this prototype.
     * @principle Public read with owner-only writes (currently write-protected).
     */
    match /profileBackgrounds/{backgroundId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

      /**
       * @description Allows public read access to global ranking information.
       * @path /rankings/{rankingId}
       * @allow (get, list) Allowed for anyone to view the rankings.
       * @deny (create, update, delete) Write operations are not permitted in this prototype.
       * @principle Public read, restricted writes.
       */
      match /rankings/{rankingId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      }

    /**
     * @description Helper function to determine if the request is authenticated.
     * @return {boolean} True if the request is authenticated; false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to determine if the requesting user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the requesting user is the owner; false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Helper function to determine if the requesting user is the owner of the EXISTING document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the requesting user is the owner and the document exists; false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}