rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'userId' can create their own profile.
     * @allow (get, update, delete) User with UID 'userId' can read, update, and delete their own profile.
     * @deny (create, get, update, delete) Any other user cannot create, read, update, or delete this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to study session data for a specific user.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create, get, list, update, delete) User with UID 'userId' can manage their own study sessions.
     * @deny (create, get, list, update, delete) Any other user cannot access these study sessions.
     * @principle Enforces document ownership for study sessions.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
     function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to weekly exercise routines for a user.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create, get, list, update, delete) User with UID 'userId' can manage their own weekly routines.
     * @deny (create, get, list, update, delete) Any other user cannot access these routines.
     * @principle Enforces document ownership for weekly routines.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
     function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user exercise completion data.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create, get, list, update, delete) User with UID 'userId' can manage their own exercise completion data.
     * @deny (create, get, list, update, delete) Any other user cannot access this data.
     * @principle Enforces document ownership for user exercises.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
     function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to store items.
     * @path /storeItems/{storeItemId}
     * @allow (get, list) All users can read store item data.
     * @deny (create, update, delete) No users can create, update, or delete store items (admin only).
     * @principle Allows public read access to store items.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to items owned by a user.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create, get, list, update, delete) User with UID 'userId' can manage their own owned items.
     * @deny (create, get, list, update, delete) Any other user cannot access these items.
     * @principle Enforces document ownership for user items.
     */
    match /users/{userId}/userItems/{userItemId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
     function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to HV Pass subscription information for a user.
     * @path /users/{userId}/hvPass
     * @allow (create, get, list, update, delete) User with UID 'userId' can manage their own HV Pass.
     * @deny (create, get, list, update, delete) Any other user cannot access this data.
     * @principle Enforces document ownership for HV Pass data.
     */
    match /users/{userId}/hvPass {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
     function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to casino game history for a user.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create, get, list, update, delete) User with UID 'userId' can manage their own casino game history.
     * @deny (create, get, list, update, delete) Any other user cannot access this history.
     * @principle Enforces document ownership for casino game history.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
     function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to global ranking information.
     * @path /rankings/{rankingId}
     * @allow (get, list) All users can read ranking data.
     * @deny (create, update, delete) No users can create, update, or delete ranking data (admin only).
     * @principle Allows public read access to rankings.
     */
    match /rankings/{rankingId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}