/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              allowing users to read and write their own data, but preventing
 *              access to other users' data. Public read access is granted to
 *              the `/storeItems` and `/rankings` collections.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the owning user.
 * - /users/{userId}/studySessions/{studySessionId}: Study sessions for a user, accessible only by the owning user.
 * - /users/{userId}/weeklyRoutine/{dayId}: Weekly routine data for a user, accessible only by the owning user.
 * - /users/{userId}/userExercises/{userExerciseId}: User exercise completion data, accessible only by the owning user.
 * - /storeItems/{storeItemId}: Publicly readable list of store items.
 * - /users/{userId}/userItems/{userItemId}: Items owned by a user, accessible only by the owning user.
 * - /users/{userId}/hvPass: HV Pass subscription information for a user, accessible only by the owning user.
 * - /users/{userId}/casinoGames/{casinoGameId}: Casino game history for a user, accessible only by the owning user.
 * - /rankings/{rankingId}: Publicly readable ranking information.
 *
 * Key Security Decisions:
 * - User data is strictly segregated based on the Firebase Auth UID.
 * - Listing of user subcollections is allowed only for the owning user.
 * - The `storeItems` and `rankings` collections are publicly readable.
 * - Write access to `storeItems` and `rankings` is denied. // TODO: Should write access be denied or restricted to certain roles
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile with data.id == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile with data.id == 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete user 'user_abc's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own study session data.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create) - User with UID 'user_abc' can create a study session under their profile.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete their own study sessions.
     * @deny (create) - User with UID 'user_xyz' cannot create a study session under user 'user_abc's profile.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete user 'user_abc's study sessions.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their weekly exercise routine.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create) - User with UID 'user_abc' can create a weekly routine under their profile.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete their own weekly routine.
     * @deny (create) - User with UID 'user_xyz' cannot create a weekly routine under user 'user_abc's profile.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete user 'user_abc's weekly routine.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their user exercise completion data.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create) - User with UID 'user_abc' can create user exercise data under their profile.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete their own user exercise data.
     * @deny (create) - User with UID 'user_xyz' cannot create user exercise data under user 'user_abc's profile.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete user 'user_abc's user exercise data.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read store item data, but restricts writing.
     * @path /storeItems/{storeItemId}
     * @allow (get, list) - Any user can read the list of store items.
     * @deny (create, update, delete) - No user can create, update, or delete store items.
     * @principle Allows public read access with restricted writes.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own store item ownership data.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create) - User with UID 'user_abc' can create user item data under their profile.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete their own user item data.
     * @deny (create) - User with UID 'user_xyz' cannot create user item data under user 'user_abc's profile.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete user 'user_abc's user item data.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/userItems/{userItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their HV Pass subscription data.
     * @path /users/{userId}/hvPass
     * @allow (create) - User with UID 'user_abc' can create HV Pass data under their profile.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete their own HV Pass data.
     * @deny (create) - User with UID 'user_xyz' cannot create HV Pass data under user 'user_abc's profile.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete user 'user_abc's HV Pass data.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/hvPass {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their casino game history data.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create) - User with UID 'user_abc' can create casino game data under their profile.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete their own casino game data.
     * @deny (create) - User with UID 'user_xyz' cannot create casino game data under user 'user_abc's profile.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete user 'user_abc's casino game data.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read ranking data, but restricts writing.
     * @path /rankings/{rankingId}
     * @allow (get, list) - Any user can read the list of rankings.
     * @deny (create, update, delete) - No user can create, update, or delete rankings.
     * @principle Allows public read access with restricted writes.
     */
    match /rankings/{rankingId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}