/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              allowing users to only access and modify their own data, with some
 *              exceptions for public or shared data.
 *
 * @dataStructure
 *   - /users/{userId}: Stores user profile data, accessible only by the user.
 *   - /users/{userId}/studySessions/{studySessionId}: Stores study session data, accessible only by the user.
 *   - /users/{userId}/weeklyRoutine/{dayId}: Stores weekly exercise routines, accessible only by the user.
 *   - /users/{userId}/userExercises/{userExerciseId}: Stores user exercise completion data, accessible only by the user.
 *   - /users/{userId}/userItems/{userItemId}: Stores user-owned items, accessible only by the user.
 *   - /users/{userId}/casinoGames/{casinoGameId}: Stores casino game history, accessible only by the user.
 *   - /storeItems/{storeItemId}: Stores a list of available store items, publicly readable.
 *   - /hvPass/v1: Defines the HV Pass rewards, publicly readable.
 *   - /profileBackgrounds/{backgroundId}: Stores a list of available profile backgrounds, publicly readable.
 *   - /rankings/{rankingId}: Stores global ranking information, publicly readable.
 *
 * @keySecurityDecisions
 *   - User listing is disallowed to protect user privacy.
 *   - Read-only collections like `/storeItems`, `/hvPass/v1` and `/profileBackgrounds` are publicly readable.
 *   - The default security posture is strict: if a relationship is ambiguous, access is denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can read, update, or delete their own profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (get, update, delete) Authenticated user cannot read, update, or delete another user's profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to study session documents for a specific user.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create, get, list, update, delete) Authenticated user can manage their own study sessions.
     * @deny (create, get, list, update, delete) Authenticated user cannot manage another user's study sessions.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to weekly routine documents for a specific user.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create, get, list, update, delete) Authenticated user can manage their own weekly routines.
     * @deny (create, get, list, update, delete) Authenticated user cannot manage another user's weekly routines.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user exercise documents for a specific user.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create, get, list, update, delete) Authenticated user can manage their own user exercises.
     * @deny (create, get, list, update, delete) Authenticated user cannot manage another user's user exercises.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to store item documents.
     * @path /storeItems/{storeItemId}
     * @allow (get, list) Any user can read the list of store items.
     * @deny (create, update, delete) No user can create, update, or delete store items.
     * @principle Publicly readable collection.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user item documents for a specific user.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create, get, list, update, delete) Authenticated user can manage their own user items.
     * @deny (create, get, list, update, delete) Authenticated user cannot manage another user's user items.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/userItems/{userItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the HV Pass definition.
     * @path /hvPass/v1
     * @allow (get, list) Any user can read the HV Pass definition.
     * @deny (create, update, delete) No user can create, update, or delete the HV Pass definition.
     * @principle Publicly readable collection.
     */
    match /hvPass/v1 {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to profile background documents.
     * @path /profileBackgrounds/{backgroundId}
     * @allow (get, list) Any user can read the list of profile backgrounds.
     * @deny (create, update, delete) No user can create, update, or delete profile backgrounds.
     * @principle Publicly readable collection.
     */
    match /profileBackgrounds/{backgroundId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to casino game documents for a specific user.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create, get, list, update, delete) Authenticated user can manage their own casino games.
     * @deny (create, get, list, update, delete) Authenticated user cannot manage another user's casino games.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ranking documents.
     * @path /rankings/{rankingId}
     * @allow (get, list) Any user can read the ranking information.
     * @deny (create, update, delete) No user can create, update, or delete ranking information.
     * @principle Publicly readable collection.
     */
    match /rankings/{rankingId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}