rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete) User with UID 'user123' can create/update/get/delete their own profile at /users/user123.
     * @deny (create, update, get, delete) User with UID 'user456' cannot create/update/get/delete the profile of user with UID 'user123' at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for study sessions. Only the authenticated user can read and write their own study sessions.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create, update, get, delete) User with UID 'user123' can create/update/get/delete their own study session at /users/user123/studySessions/session1.
     * @deny (create, update, get, delete) User with UID 'user456' cannot create/update/get/delete the study session of user with UID 'user123' at /users/user123/studySessions/session1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for weekly routines. Only the authenticated user can read and write their own weekly routines.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create, update, get, delete) User with UID 'user123' can create/update/get/delete their own weekly routine at /users/user123/weeklyRoutine/monday.
     * @deny (create, update, get, delete) User with UID 'user456' cannot create/update/get/delete the weekly routine of user with UID 'user123' at /users/user123/weeklyRoutine/monday.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user exercises. Only the authenticated user can read and write their own user exercises.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create, update, get, delete) User with UID 'user123' can create/update/get/delete their own user exercise at /users/user123/userExercises/exercise1.
     * @deny (create, update, get, delete) User with UID 'user456' cannot create/update/get/delete the user exercise of user with UID 'user123' at /users/user123/userExercises/exercise1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to store items, but restricts write access.
     * @path /storeItems/{storeItemId}
     * @allow (get, list) Any user can get/list store items.
     * @deny (create, update, delete) No user can create/update/delete store items through the client.
     * @principle Allows public read access and restricts write access.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for user items. Only the authenticated user can read and write their own user items.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create, update, get, delete) User with UID 'user123' can create/update/get/delete their own user item at /users/user123/userItems/item1.
     * @deny (create, update, get, delete) User with UID 'user456' cannot create/update/get/delete the user item of user with UID 'user123' at /users/user123/userItems/item1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userItems/{userItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to HV Pass data. Read-only access.
     * @path /hvPass/v1
     * @allow (get, list) Any user can get/list the HV Pass data.
     * @deny (create, update, delete) No user can create/update/delete HV Pass data through the client.
     */
    match /hvPass/v1 {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to profile backgrounds, but restricts write access.
     * @path /profileBackgrounds/{backgroundId}
     * @allow (get, list) Any user can get/list profile backgrounds.
     * @deny (create, update, delete) No user can create/update/delete profile backgrounds through the client.
     * @principle Allows public read access and restricts write access.
     */
    match /profileBackgrounds/{backgroundId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to color themes, but restricts write access.
     * @path /colorThemes/{themeId}
     * @allow (get, list) Any user can get/list color themes.
     * @deny (create, update, delete) No user can create/update/delete color themes through the client.
     * @principle Allows public read access and restricts write access.
     */
    match /colorThemes/{themeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for casino game history. Only the authenticated user can read and write their own casino game history.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create, update, get, delete) User with UID 'user123' can create/update/get/delete their own casino game record at /users/user123/casinoGames/game1.
     * @deny (create, update, get, delete) User with UID 'user456' cannot create/update/get/delete the casino game record of user with UID 'user123' at /users/user123/casinoGames/game1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Allows public read access to ranking data, but restricts write access to ensure data integrity.
       * @path /rankings/{userId}
       * @allow (get, list) Any user can get/list the ranking data.
       * @deny (create, update, delete) No user can create/update/delete ranking data through the client.
       * @principle Allows public read access but restricts write access.
       */
    match /rankings/{userId} {
      allow get: if true;
      allow list: if true;
            allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}