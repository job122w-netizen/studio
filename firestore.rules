/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              allowing users to read and write their own data while preventing
 *              unauthorized access to other users' information. Public read access
 *              is granted to a few top-level collections like `storeItems` and
 *              `profileBackgrounds`, but write access is restricted.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Publicly readable data (store items, profile backgrounds) resides in
 *   top-level collections.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only manage their own study sessions, weekly routines, user exercises and casino games.
 * - Store items and profile backgrounds are publicly readable but not writable
 *   directly by users.
 * - HV Pass definitions are read-only.
 * - Global rankings are publicly readable, but writes are not allowed, as the backend manages them.
 *
 * Denormalization for Authorization:
 *  - For simplicity, all subcollections under `/users/{userId}` inherit
 *    ownership based on the `userId` in the path. Documents in these subcollections
 *    should contain a `userId` field matching the parent path's `userId`. This
 *    is validated on creation and enforced as immutable on updates.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public data
 *   is stored in top-level collections. This avoids the need for complex
 *   rules based on boolean flags.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);

    
      /**
       * @description Allows a user to manage their own study sessions.
       * @path /users/{userId}/studySessions/{studySessionId}
       * @allow (get, create, update, delete, list) if request.auth.uid == userId
       * @deny (get, create, update, delete, list) if request.auth.uid != userId
       * @principle Enforces document ownership for reads and writes.
       */
      match /studySessions/{studySessionId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);

          allow create: if isOwner(userId) && request.resource.data.userId == userId;
          allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
          allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Allows a user to manage their weekly routine.
       * @path /users/{userId}/weeklyRoutine/{dayId}
       * @allow (get, create, update, delete, list) if request.auth.uid == userId
       * @deny (get, create, update, delete, list) if request.auth.uid != userId
       * @principle Enforces document ownership for reads and writes.
       */
      match /weeklyRoutine/{dayId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);

          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Allows a user to manage their user exercises.
       * @path /users/{userId}/userExercises/{userExerciseId}
       * @allow (get, create, update, delete, list) if request.auth.uid == userId
       * @deny (get, create, update, delete, list) if request.auth.uid != userId
       * @principle Enforces document ownership for reads and writes.
       */
      match /userExercises/{userExerciseId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);

          allow create: if isOwner(userId) && request.resource.data.userId == userId;
          allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
          allow delete: if isExistingOwner(userId);
      }
      
       /**
       * @description Allows a user to manage their owned items.
       * @path /users/{userId}/userItems/{userItemId}
       * @allow (get, create, update, delete, list) if request.auth.uid == userId
       * @deny (get, create, update, delete, list) if request.auth.uid != userId
       * @principle Enforces document ownership for reads and writes.
       */
      match /userItems/{userItemId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);

          allow create: if isOwner(userId) && request.resource.data.userId == userId;
          allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
          allow delete: if isExistingOwner(userId);
      }
      
      /**
       * @description Allows a user to manage their casino game history.
       * @path /users/{userId}/casinoGames/{casinoGameId}
       * @allow (get, create, update, delete, list) if request.auth.uid == userId
       * @deny (get, create, update, delete, list) if request.auth.uid != userId
       * @principle Enforces document ownership for reads and writes.
       */
      match /casinoGames/{casinoGameId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);

          allow create: if isOwner(userId) && request.resource.data.userId == userId;
          allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
          allow delete: if isExistingOwner(userId);
      }
    }

    /**
     * @description Allows anyone to read store items, but only admins can create, update, or delete them.
     * @path /storeItems/{storeItemId}
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Public read access with restricted writes.
     */
    match /storeItems/{storeItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation if needed.
    }

   /**
     * @description Defines the HV Pass rewards for version 1.  Read-only.
     * @path /hvPass/v1
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Public read access with restricted writes.
     */
    match /hvPass/v1 {
        allow get, list: if true;
        allow create, update, delete: if false; //HV Pass should be immutable
    }
    
    /**
     * @description Defines a list of all available profile backgrounds. Read-only for users.
     * @path /profileBackgrounds/{backgroundId}
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Public read access with restricted writes.
     */
    match /profileBackgrounds/{backgroundId} {
        allow get, list: if true;
        allow create, update, delete: if false; //Profile Backgrounds should be immutable
    }
    
    /**
     * @description Stores global ranking information. Read-only for users.
     * @path /rankings/{rankingId}
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Public read access with restricted writes.
     */
    match /rankings/{rankingId} {
        allow get, list: if true;
        allow create, update, delete: if false; //Ranking should be managed by server
    }
  }
}