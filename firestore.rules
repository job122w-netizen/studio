/**
 * @file Firestore Security Rules for Desaf√≠o HV
 * @version 2
 *
 * @Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data and allows public read access to certain collections.
 *
 * @Data Structure:
 * - User profiles and associated data (study sessions, routines, exercises, items, casino games) are nested under `/users/{userId}`.
 * - Public data (store items, HV Pass definitions, profile backgrounds, rankings) resides in top-level collections.
 *
 * @Key Security Decisions:
 * - Users can only access their own profile data and associated subcollections.
 * - Public data is readable by all users.
 * - Listing of user documents is disallowed to prevent enumeration.
 * - Write access to public collections is disallowed.
 * - Data validation is minimized for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can create their profile if request.auth.uid == userId
     * @allow (get) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can read their profile.
     * @allow (update) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can update their profile.
     * @allow (delete) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can delete their profile.
     * @deny (create) User 'otherUserId' cannot create a profile for '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (get) User 'otherUserId' cannot read the profile of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (update) User 'otherUserId' cannot update the profile of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (delete) User 'otherUserId' cannot delete the profile of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of user documents

      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to study session data for a specific user.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can create study sessions.
     * @allow (get) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can read their study sessions.
     * @allow (list) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can list their study sessions.
     * @allow (update) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can update their study sessions.
     * @allow (delete) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can delete their study sessions.
     * @deny (create) User 'otherUserId' cannot create study sessions for '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (get) User 'otherUserId' cannot read the study sessions of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (list) User 'otherUserId' cannot list the study sessions of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (update) User 'otherUserId' cannot update the study sessions of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (delete) User 'otherUserId' cannot delete the study sessions of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to weekly routine data for a specific user.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can create weekly routines.
     * @allow (get) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can read their weekly routines.
     * @allow (list) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can list their weekly routines.
     * @allow (update) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can update their weekly routines.
     * @allow (delete) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can delete their weekly routines.
     * @deny (create) User 'otherUserId' cannot create weekly routines for '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (get) User 'otherUserId' cannot read the weekly routines of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (list) User 'otherUserId' cannot list the weekly routines of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (update) User 'otherUserId' cannot update the weekly routines of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (delete) User 'otherUserId' cannot delete the weekly routines of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user exercise data for a specific user.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can create user exercises.
     * @allow (get) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can read their user exercises.
     * @allow (list) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can list their user exercises.
     * @allow (update) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can update their user exercises.
     * @allow (delete) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can delete their user exercises.
     * @deny (create) User 'otherUserId' cannot create user exercises for '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (get) User 'otherUserId' cannot read the user exercises of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (list) User 'otherUserId' cannot list the user exercises of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (update) User 'otherUserId' cannot update the user exercises of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (delete) User 'otherUserId' cannot delete the user exercises of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to store items. Store items are publicly readable but not writable by clients.
     * @path /storeItems/{storeItemId}
     * @allow (get) Any user can read store items.
     * @allow (list) Any user can list store items.
     * @deny (create) No user can create store items through the client.
     * @deny (update) No user can update store items through the client.
     * @deny (delete) No user can delete store items through the client.
     * @principle Allows public read access to store items.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user items.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can create user items.
     * @allow (get) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can read their user items.
     * @allow (list) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can list their user items.
     * @allow (update) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can update their user items.
     * @allow (delete) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can delete their user items.
     * @deny (create) User 'otherUserId' cannot create user items for '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (get) User 'otherUserId' cannot read the user items of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (list) User 'otherUserId' cannot list the user items of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (update) User 'otherUserId' cannot update the user items of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (delete) User 'otherUserId' cannot delete the user items of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userItems/{userItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the HV Pass definition. The HV Pass is publicly readable but not writable by clients.
     * @path /hvPass/v1
     * @allow (get) Any user can read the HV Pass definition.
     * @allow (list) Any user can list the HV Pass definition.
     * @deny (create) No user can create HV Pass data through the client.
     * @deny (update) No user can update HV Pass data through the client.
     * @deny (delete) No user can delete HV Pass data through the client.
     * @principle Allows public read access to the HV Pass.
     */
    match /hvPass/v1 {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to profile backgrounds. Profile backgrounds are publicly readable but not writable by clients.
     * @path /profileBackgrounds/{backgroundId}
     * @allow (get) Any user can read profile backgrounds.
     * @allow (list) Any user can list profile backgrounds.
     * @deny (create) No user can create profile backgrounds through the client.
     * @deny (update) No user can update profile backgrounds through the client.
     * @deny (delete) No user can delete profile backgrounds through the client.
     * @principle Allows public read access to profile backgrounds.
     */
    match /profileBackgrounds/{backgroundId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to casino game data for a specific user.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can create casino games.
     * @allow (get) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can read their casino games.
     * @allow (list) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can list their casino games.
     * @allow (update) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can update their casino games.
     * @allow (delete) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can delete their casino games.
     * @deny (create) User 'otherUserId' cannot create casino games for '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (get) User 'otherUserId' cannot read the casino games of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (list) User 'otherUserId' cannot list the casino games of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (update) User 'otherUserId' cannot update the casino games of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @deny (delete) User 'otherUserId' cannot delete the casino games of '63LfPrMuKfQX7xMuNc6F3MlCftK2'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Controls access to ranking data. Ranking data is publicly readable, and users can only create their own ranking document.
     * @path /rankings/{userId}
     * @allow (get) Any user can read ranking data.
     * @allow (list) Any user can list ranking data.
     * @allow (create) User '63LfPrMuKfQX7xMuNc6F3MlCftK2' can create their own ranking data.
     * @deny (update) No user can update the ranking document.
     * @deny (delete) No user can delete the ranking document.
     * @principle Allows public read access and owner-only create access.
     */
    match /rankings/{userId} {
        allow get: if true;
        allow list: if true;
        allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid; // Owner can create
        allow update: if false;
        allow delete: if false;
    }

    // Define helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}