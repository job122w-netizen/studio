/**
 * @fileoverview Firestore Security Rules for Desaf√≠o HV App
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for private user data and allows public read access to shared data.
 *
 * Data Structure:
 * - User-specific data (profile, study sessions, routines, exercises, casino games, user items) is nested under `/users/{userId}`.
 * - Shared/Public data (store items, HV Pass, profile backgrounds, color themes, rankings) are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under their respective `/users/{userId}` path.
 * - Listing of user documents is disallowed to prevent information disclosure.
 * - Public collections are readable by everyone, but writable only with proper authentication and ownership.
 * - Ranking data is publicly accessible but can only be created/updated with the correct user ID.
 *
 * Denormalization for Authorization:
 * - Ranking documents MUST have the userId field to match the document id. This avoids needing to query for the user when updating the ranking.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} collection, while public ranking data is stored in the /rankings/{userId} collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete the profile document at /users/user123.
     * @allow (create) User with UID 'user123' can create the profile document at /users/user123, which is their own profile.
     * @deny (get) User with UID 'user456' cannot read the profile document at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile document at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile document at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all user documents

      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.username is string && request.resource.data.level is number && request.resource.data.experiencePoints is number && request.resource.data.goldLingots is number && request.resource.data.casinoChips is number && request.resource.data.gems is number && request.resource.data.hvPassLevel is number && request.resource.data.hvPassXp is number && request.resource.data.hasPremiumPass is bool;

      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure study sessions. Only the owner can read/write their own study sessions.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create, get, update, delete, list) User with UID 'user123' can manage their study sessions under /users/user123/studySessions/.
     * @deny (create, get, update, delete, list) User with UID 'user456' cannot access the study sessions under /users/user123/studySessions/.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/studySessions/{studySessionId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure weekly routines. Only the owner can read/write their own routines.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create, get, update, delete, list) User with UID 'user123' can manage their weekly routines under /users/user123/weeklyRoutine/.
     * @deny (create, get, update, delete, list) User with UID 'user456' cannot access the weekly routines under /users/user123/weeklyRoutine/.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user exercises. Only the owner can read/write their own exercise data.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create, get, update, delete, list) User with UID 'user123' can manage their exercise data under /users/user123/userExercises/.
     * @deny (create, get, update, delete, list) User with UID 'user456' cannot access the exercise data under /users/user123/userExercises/.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Public read access to store items; no writes allowed.
     * @path /storeItems/{storeItemId}
     * @allow (get, list) Any user can read the store items.
     * @deny (create, update, delete) No user can create, update, or delete store items through the client.
     * @principle Provides public read access to store items while restricting write access.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Secure user items. Only the owner can read/write their own item data.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create, get, update, delete, list) User with UID 'user123' can manage their items under /users/user123/userItems/.
     * @deny (create, get, update, delete, list) User with UID 'user456' cannot access the items under /users/user123/userItems/.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/userItems/{userItemId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Public read access to HV Pass data; no writes allowed.
     * @path /hvPass/v1
     * @allow (get, list) Any user can read the HV Pass data.
     * @deny (create, update, delete) No user can create, update, or delete HV Pass data through the client.
     * @principle Provides public read access to HV Pass data while restricting write access.
     */
    match /hvPass/v1 {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Public read access to profile backgrounds; no writes allowed.
     * @path /profileBackgrounds/{backgroundId}
     * @allow (get, list) Any user can read the available profile backgrounds.
     * @deny (create, update, delete) No user can create, update, or delete profile backgrounds through the client.
     * @principle Provides public read access to profile backgrounds while restricting write access.
     */
    match /profileBackgrounds/{backgroundId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Public read access to color themes; no writes allowed.
     * @path /colorThemes/{themeId}
     * @allow (get, list) Any user can read the available color themes.
     * @deny (create, update, delete) No user can create, update, or delete color themes through the client.
     * @principle Provides public read access to color themes while restricting write access.
     */
    match /colorThemes/{themeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure casino games. Only the owner can read/write their own casino games.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create, get, update, delete, list) User with UID 'user123' can manage their casino games under /users/user123/casinoGames/.
     * @deny (create, get, update, delete, list) User with UID 'user456' cannot access the casino games under /users/user123/casinoGames/.
     * @principle Enforces document ownership and prevents unauthorized access.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Public read access to ranking data, owner-only writes.
     * @path /rankings/{userId}
     * @allow (get, list) Any user can read the ranking data.
     * @allow (create) User with UID 'user123' can create a ranking with userId == 'user123'.
     * @allow (update, delete) User with UID 'user123' can update/delete the ranking with userId == 'user123', if it exists.
     * @deny (create) User with UID 'user456' cannot create a ranking with userId == 'user123'.
     * @deny (update, delete) User with UID 'user456' cannot update/delete the ranking with userId == 'user123'.
     * @principle Allows public ranking visibility but enforces ownership for modifications.
     */
    match /rankings/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    }
  }
}