/**
 * @file Firestore Security Rules for Desaf√≠o HV App
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data,
 *                  while allowing public read access to certain collections like exercises and store items.
 * @data_structure User data is nested under /users/{userId}, with subcollections for study sessions,
 *                 user exercises, user items, HV Pass information, and casino game history.
 *                 Exercises, store items, and rankings are stored in top-level collections.
 * @key_security_decisions
 *   - Users can only create, read, update, and delete their own profile data.
 *   - Public read access is granted for exercises and store items.
 *   - User listing is disabled to protect user privacy.
 * @denormalization Authorization checks are simplified by requiring ownership fields (userId)
 *                 in documents within user-specific subcollections.
 * @structural_segregation Private user data is stored under /users/{userId}, while public
 *                        data (exercises, store items) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can create their own profile.
     * @allow (get) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can read their own profile.
     * @allow (update) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can update their own profile.
     * @allow (delete) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can delete their own profile.
     * @deny (create) User with UID 'differentUserId' cannot create a profile for 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @deny (get) User with UID 'differentUserId' cannot read the profile of 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to study session data for a specific user.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can create a study session for themselves.
     * @allow (get) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can read their own study sessions.
     * @allow (list) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can list their own study sessions.
     * @allow (update) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can update their own study sessions.
     * @allow (delete) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can delete their own study sessions.
     * @deny (create) User with UID 'differentUserId' cannot create a study session for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @deny (get) User with UID 'differentUserId' cannot read study sessions for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to available exercises. Public read, no writes.
     * @path /exercises/{exerciseId}
     * @allow (get) Any user can read exercises.
     * @allow (list) Any user can list exercises.
     * @deny (create) No user can create exercises.
     * @deny (update) No user can update exercises.
     * @deny (delete) No user can delete exercises.
     * @principle Public read access to exercises, with restricted write access.
     */
    match /exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user exercise completion data.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can create exercise completion data for themselves.
     * @allow (get) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can read their own exercise completion data.
     * @allow (list) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can list their own exercise completion data.
     * @allow (update) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can update their own exercise completion data.
     * @allow (delete) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can delete their own exercise completion data.
     * @deny (create) User with UID 'differentUserId' cannot create exercise completion data for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @deny (get) User with UID 'differentUserId' cannot read exercise completion data for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to available store items. Public read, no writes.
     * @path /storeItems/{storeItemId}
     * @allow (get) Any user can read store items.
     * @allow (list) Any user can list store items.
     * @deny (create) No user can create store items.
     * @deny (update) No user can update store items.
     * @deny (delete) No user can delete store items.
     * @principle Public read access to store items, with restricted write access.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user-owned items.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can create a user item for themselves.
     * @allow (get) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can read their own user items.
     * @allow (list) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can list their own user items.
     * @allow (update) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can update their own user items.
     * @allow (delete) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can delete their own user items.
     * @deny (create) User with UID 'differentUserId' cannot create a user item for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @deny (get) User with UID 'differentUserId' cannot read user items for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userItems/{userItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to HV Pass subscription information for a user.
     * @path /users/{userId}/hvPass
     * @allow (create) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can create an HV Pass for themselves.
     * @allow (get) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can read their own HV Pass.
     * @allow (update) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can update their own HV Pass.
     * @allow (delete) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can delete their own HV Pass.
     * @deny (create) User with UID 'differentUserId' cannot create an HV Pass for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @deny (get) User with UID 'differentUserId' cannot read the HV Pass for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/hvPass {
      allow get: if isOwner(userId);
      allow list: if false; // Only supports get, so list is denied
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to casino game history for a user.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can create a casino game record for themselves.
     * @allow (get) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can read their own casino game history.
     * @allow (list) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can list their own casino game history.
     * @allow (update) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can update their own casino game history.
     * @allow (delete) User with UID 'y26j91d3csbiY0TnGjHQ3IQp9Kq2' can delete their own casino game history.
     * @deny (create) User with UID 'differentUserId' cannot create a casino game record for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @deny (get) User with UID 'differentUserId' cannot read casino game history for user 'y26j91d3csbiY0TnGjHQ3IQp9Kq2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to global ranking information.
     * @path /rankings/{rankingId}
     * @allow (get) Any user can read ranking information.
     * @allow (list) Any user can list ranking information.
     * @deny (create) No user can create ranking information.
     * @deny (update) No user can update ranking information.
     * @deny (delete) No user can delete ranking information.
     * @principle Public read access to ranking information, with restricted write access.
     */
    match /rankings/{rankingId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the document, and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}