/**
 * @fileoverview Firestore Security Rules for Desaf√≠o HV App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data, while allowing public read access to certain collections and read-only access to shared data.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`, ensuring only the owning user can access it.
 * - Publicly readable data, like store items and ranking information, are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and related subcollections.
 * - Listing of user documents is disallowed for privacy.
 * - Public data (store items, profile backgrounds, color themes, rankings) is readable by all.
 *
 * Denormalization for Authorization:
 * - The `userId` is present on all documents nested under `/users/{userId}` to avoid needing `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for the root.
     * @path /
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Root rules should be very limited to avoid accidental open access.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId); (get)
     * @allow list: if false;
     * @allow create: if isSignedIn() && isOwner(userId); (create)
     * @allow update: if isSignedIn() && isExistingOwner(userId); (update)
     * @allow delete: if isSignedIn() && isExistingOwner(userId); (delete)
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     *
     * @principle Enforces document ownership for writes.  User must be signed in to access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own study session data.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow get: if isSignedIn() && isOwner(userId); (get)
     * @allow list: if isSignedIn() && isOwner(userId); (list)
     * @allow create: if isSignedIn() && isOwner(userId); (create)
     * @allow update: if isSignedIn() && isExistingOwner(userId); (update)
     * @allow delete: if isSignedIn() && isExistingOwner(userId); (delete)
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their weekly routine.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow get: if isSignedIn() && isOwner(userId); (get)
     * @allow list: if isSignedIn() && isOwner(userId); (list)
     * @allow create: if isSignedIn() && isOwner(userId); (create)
     * @allow update: if isSignedIn() && isExistingOwner(userId); (update)
     * @allow delete: if isSignedIn() && isExistingOwner(userId); (delete)
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their completed exercises.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow get: if isSignedIn() && isOwner(userId); (get)
     * @allow list: if isSignedIn() && isOwner(userId); (list)
     * @allow create: if isSignedIn() && isOwner(userId); (create)
     * @allow update: if isSignedIn() && isExistingOwner(userId); (update)
     * @allow delete: if isSignedIn() && isExistingOwner(userId); (delete)
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read the store items, but no one to create, update or delete them.
     * @path /storeItems/{storeItemId}
     * @allow get: if true; (get)
     * @allow list: if true; (list)
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Store items are publicly readable but not writable by users.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their owned store items.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow get: if isSignedIn() && isOwner(userId); (get)
     * @allow list: if isSignedIn() && isOwner(userId); (list)
     * @allow create: if isSignedIn() && isOwner(userId); (create)
     * @allow update: if isSignedIn() && isExistingOwner(userId); (update)
     * @allow delete: if isSignedIn() && isExistingOwner(userId); (delete)
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/userItems/{userItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read the HV Pass definition, but no one to create, update or delete it.
     * @path /hvPass/v1
     * @allow get: if true; (get)
     * @allow list: if true; (list)
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle The HV Pass definition is publicly readable but not writable by users.
     */
    match /hvPass/v1 {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read the profile backgrounds, but no one to create, update or delete them.
     * @path /profileBackgrounds/{backgroundId}
     * @allow get: if true; (get)
     * @allow list: if true; (list)
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Profile backgrounds are publicly readable but not writable by users.
     */
    match /profileBackgrounds/{backgroundId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read the color themes, but no one to create, update or delete them.
     * @path /colorThemes/{themeId}
     * @allow get: if true; (get)
     * @allow list: if true; (list)
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Color themes are publicly readable but not writable by users.
     */
    match /colorThemes/{themeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their casino game history.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow get: if isSignedIn() && isOwner(userId); (get)
     * @allow list: if isSignedIn() && isOwner(userId); (list)
     * @allow create: if isSignedIn() && isOwner(userId); (create)
     * @allow update: if isSignedIn() && isExistingOwner(userId); (update)
     * @allow delete: if isSignedIn() && isExistingOwner(userId); (delete)
     * @deny get: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read the ranking data, but only the user themselves to create, update or delete their own ranking data.
     * @path /rankings/{userId}
     * @allow get: if true; (get)
     * @allow list: if true; (list)
     * @allow create: if isSignedIn() && isOwner(userId); (create)
     * @allow update: if isSignedIn() && isExistingOwner(userId); (update)
     * @allow delete: if isSignedIn() && isExistingOwner(userId); (delete)
     * @deny create: if !isSignedIn();
     * @principle Ranking data is publicly readable, but owner-writable.
     */
    match /rankings/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && userId == request.auth.uid;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}