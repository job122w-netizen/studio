/**
 * @description This ruleset enforces a strict user-ownership model for most data, with public read access to certain collections like store items, profile backgrounds, and color themes.
 * @dataStructure
 *  - /users/{userId}: Private user profile data, owned by the user.
 *  - /users/{userId}/studySessions/{studySessionId}: Study session data, owned by the user.
 *  - /users/{userId}/weeklyRoutine/{dayId}: Weekly routine data, owned by the user.
 *  - /users/{userId}/userExercises/{userExerciseId}: User exercise data, owned by the user.
 *  - /users/{userId}/userItems/{userItemId}: User owned items, owned by the user.
 *  - /users/{userId}/casinoGames/{casinoGameId}: User casino game history, owned by the user.
 *  - /storeItems/{storeItemId}: Public store items.
 *  - /hvPass/v1: HV Pass definition (public read, admin write - not implemented in this version).
 *  - /profileBackgrounds/{backgroundId}: Public profile backgrounds.
 *  - /colorThemes/{themeId}: Public color themes.
 *  - /rankings/{userId}: Public ranking data for each user.
 * @keySecurityDecisions
 *  - User data is private and only accessible by the owning user.
 *  - Store items, profile backgrounds, and color themes are publicly readable.
 *  - The HV Pass definition is publicly readable.
 *  - User listing is disabled for privacy.
 *  - Ranking data is publicly readable.
 * @denormalizationForAuthorization
 *  - User-specific data is nested under the /users/{userId} path, making ownership checks simple and efficient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own study session data.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create) - User with UID 'user123' can create a study session.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their study sessions.
     * @deny (create) - User with UID 'user456' cannot create a study session for user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the study session of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own weekly routine data.
     * @path /users/{userId}/weeklyRoutine/{dayId}
     * @allow (create) - User with UID 'user123' can create a weekly routine entry.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their weekly routine.
     * @deny (create) - User with UID 'user456' cannot create a weekly routine for user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the weekly routine of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own user exercise data.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create) - User with UID 'user123' can create a user exercise entry.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their user exercises.
     * @deny (create) - User with UID 'user456' cannot create a user exercise for user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the user exercise of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to store items. Write access is denied (admin only in full implementation).
     * @path /storeItems/{storeItemId}
     * @allow (get, list) - Any user can read the store items.
     * @deny (create, update, delete) - No user can create, update, or delete store items.
     * @principle Public read access with restricted writes.
     */
    match /storeItems/{storeItemId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own user item data.
     * @path /users/{userId}/userItems/{userItemId}
     * @allow (create) - User with UID 'user123' can create a user item entry.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their user items.
     * @deny (create) - User with UID 'user456' cannot create a user item for user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the user item of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userItems/{userItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to the HV Pass definition. Write access is denied (admin only in full implementation).
     * @path /hvPass/v1
     * @allow (get, list) - Any user can read the HV Pass data.
     * @deny (create, update, delete) - No user can create, update, or delete HV Pass data.
     * @principle Public read access with restricted writes.
     */
    match /hvPass/v1 {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to profile backgrounds. Write access is denied (admin only in full implementation).
     * @path /profileBackgrounds/{backgroundId}
     * @allow (get, list) - Any user can read the profile backgrounds.
     * @deny (create, update, delete) - No user can create, update, or delete profile backgrounds.
     * @principle Public read access with restricted writes.
     */
    match /profileBackgrounds/{backgroundId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to color themes. Write access is denied (admin only in full implementation).
     * @path /colorThemes/{themeId}
     * @allow (get, list) - Any user can read the color themes.
     * @deny (create, update, delete) - No user can create, update, or delete color themes.
     * @principle Public read access with restricted writes.
     */
    match /colorThemes/{themeId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Allows users to read and write their own casino game data.
     * @path /users/{userId}/casinoGames/{casinoGameId}
     * @allow (create) - User with UID 'user123' can create a casino game entry.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete their casino games.
     * @deny (create) - User with UID 'user456' cannot create a casino game for user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the casino game of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Allows public read access to ranking data. Write access is restricted to only allow creating a ranking document for the current user.
      * @path /rankings/{userId}
      * @allow (get, list) - Any user can read the ranking data.
      * @allow (create) - Only the user with matching {userId} can create the ranking document.
      * @deny (update, delete) - No user can update or delete the ranking data.
      * @principle Public read access with owner-only create.
      */
    match /rankings/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if false;
      allow delete: if false;
    }
  }
}