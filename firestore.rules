/**
 * @fileoverview Firestore Security Rules for the Desaf√≠o HV app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while
 * allowing public read access to shared or static data.  All write operations
 * are protected by authorization checks based on the authenticated user.
 *
 * Data Structure:
 * - User-specific data is nested under /users/{userId}, ensuring private access.
 * - Public data (exercises, products, PaseHV tiers, casino games, rankings)
 *   resides in top-level collections, allowing open read access.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed due to the lack of a top-level /users
 *   collection.
 * - Read-only collections like /exercises and /products are publicly readable.
 * - The default security posture for ambiguous relationships is strict
 *   owner-only access.
 *
 * Denormalization for Authorization:
 * To simplify rules, data required for authorization (e.g., ownership) must be
 * present directly on the documents being secured. This avoids costly `get()`
 * calls in security rules.
 *
 * Structural Segregation:
 * Data is segregated into user-private and public collections to optimize
 * security and performance for list operations.  Private data is stored in
 * user subcollections, while public data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * Useful for update and delete operations to prevent acting on non-existent documents.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}/userProfile
     * @allow (create) - Authenticated user creates their profile.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own profile.
     * @deny (create) - Authenticated user tries to create another user's profile.
     * @deny (get, update, delete) - Authenticated user tries to read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userProfile {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for study sessions.
     * @path /users/{userId}/studySessions/{studySessionId}
     * @allow (create) - Authenticated user creates a study session for themselves.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own study session.
     * @deny (create) - Authenticated user tries to create a study session for another user.
     * @deny (get, update, delete) - Authenticated user tries to read, update, or delete another user's study session.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for exercises.
     * @path /exercises/{exerciseId}
     * @allow (get, list) - All users can read the exercises.
     * @deny (create, update, delete) - No user can create, update, or delete exercises (admin only).
     * @principle Public read access with no write access.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for user exercises.
     * @path /users/{userId}/userExercises/{userExerciseId}
     * @allow (create) - Authenticated user creates a user exercise for themselves.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own user exercise.
     * @deny (create) - Authenticated user tries to create a user exercise for another user.
     * @deny (get, update, delete) - Authenticated user tries to read, update, or delete another user's user exercise.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for products.
     * @path /products/{productId}
     * @allow (get, list) - All users can read the products.
     * @deny (create, update, delete) - No user can create, update, or delete products (admin only).
     * @principle Public read access with no write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for purchases.
     * @path /users/{userId}/purchases/{purchaseId}
     * @allow (create) - Authenticated user creates a purchase for themselves.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own purchase.
     * @deny (create) - Authenticated user tries to create a purchase for another user.
     * @deny (get, update, delete) - Authenticated user tries to read, update, or delete another user's purchase.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/purchases/{purchaseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for PaseHV subscriptions.
     * @path /paseHV/{paseHVId}
     * @allow (get, list) - All users can read the PaseHV subscriptions.
     * @deny (create, update, delete) - No user can create, update, or delete PaseHV subscriptions (admin only).
     * @principle Public read access with no write access.
     */
    match /paseHV/{paseHVId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for casino games.
     * @path /casinoGames/{casinoGameId}
     * @allow (get, list) - All users can read the casino games.
     * @deny (create, update, delete) - No user can create, update, or delete casino games (admin only).
     * @principle Public read access with no write access.
     */
    match /casinoGames/{casinoGameId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for game plays.
     * @path /users/{userId}/gamePlays/{gamePlayId}
     * @allow (create) - Authenticated user creates a game play for themselves.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own game play.
     * @deny (create) - Authenticated user tries to create a game play for another user.
     * @deny (get, update, delete) - Authenticated user tries to read, update, or delete another user's game play.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/gamePlays/{gamePlayId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for rankings.
     * @path /rankings/{rankingId}
     * @allow (get, list) - All users can read the rankings.
     * @deny (create, update, delete) - No user can create, update, or delete rankings (admin only).
     * @principle Public read access with no write access.
     */
    match /rankings/{rankingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}