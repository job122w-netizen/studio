/**
 * @fileoverview Firestore Security Rules for Desaf√≠o HV App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data,
 * ensuring that users can only access their own profile information, study sessions, exercise routines,
 * purchased items, HV Pass status, and casino game history. Public read access is allowed for store items and rankings.
 *
 * Data Structure:
 * - User profiles and associated data are nested under `/users/{userId}`.
 * - Store items are stored in the top-level `/storeItems/{storeItemId}` collection.
 * - Rankings are stored in the top-level `/rankings/{rankingId}` collection.
 *
 * Key Security Decisions:
 * - Users can only list documents in their own user subcollections.
 * - Store items are publicly readable but not writable by clients.
 * - Global rankings are publicly readable but not writable by clients.
 *
 * Denormalization for Authorization:
 * The `userId` field is used in subcollections under `/users/{userId}`.
 * This `userId` in documents must match the `userId` segment of the path for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create, update, delete) User with UID 'userId' can access their own profile.
     * @deny (get, create, update, delete) User with UID 'anotherUserId' cannot access the profile of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // No listing of all users.

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure study session data for a specific user.
     * @path /databases/{database}/documents/users/{userId}/studySessions/{studySessionId}
     * @allow (get, create, update, delete) User with UID 'userId' can access their own study sessions.
     * @deny (get, create, update, delete) User with UID 'anotherUserId' cannot access the study sessions of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/studySessions/{studySessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure weekly exercise routines for a specific user.
     * @path /databases/{database}/documents/users/{userId}/weeklyRoutine/{dayId}
     * @allow (get, create, update, delete) User with UID 'userId' can access their own weekly routine.
     * @deny (get, create, update, delete) User with UID 'anotherUserId' cannot access the weekly routine of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/weeklyRoutine/{dayId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId); //  && request.resource.data.userId == userId; -- There is no userId here, assume it's ok.
      allow update: if isExistingOwner(userId); // && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user exercise completion data for a specific user.
     * @path /databases/{database}/documents/users/{userId}/userExercises/{userExerciseId}
     * @allow (get, create, update, delete) User with UID 'userId' can access their own exercise completions.
     * @deny (get, create, update, delete) User with UID 'anotherUserId' cannot access the exercise completions of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userExercises/{userExerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Store items are publicly readable but not writable by clients.
     * @path /databases/{database}/documents/storeItems/{storeItemId}
     * @allow (get, list) Any user can read store item information.
     * @deny (create, update, delete) No user can create, update, or delete store items.
     * @principle Public read access with no client-side writes.
     */
    match /storeItems/{storeItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure user items owned by a specific user.
     * @path /databases/{database}/documents/users/{userId}/userItems/{userItemId}
     * @allow (get, create, update, delete) User with UID 'userId' can access their own owned items.
     * @deny (get, create, update, delete) User with UID 'anotherUserId' cannot access the owned items of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userItems/{userItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure HV Pass subscription information for a user.
     * @path /databases/{database}/documents/users/{userId}/hvPass
     * @allow (get, create, update, delete) User with UID 'userId' can access their own HV Pass information.
     * @deny (get, create, update, delete) User with UID 'anotherUserId' cannot access the HV Pass information of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/hvPass {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Technically this should be a single document, so listing all HV passes is wrong.

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure casino game history for a user.
     * @path /databases/{database}/documents/users/{userId}/casinoGames/{casinoGameId}
     * @allow (get, create, update, delete) User with UID 'userId' can access their own casino game history.
     * @deny (get, create, update, delete) User with UID 'anotherUserId' cannot access the casino game history of 'userId'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/casinoGames/{casinoGameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Global rankings are publicly readable, but not writable by clients.
     * @path /databases/{database}/documents/rankings/{rankingId}
     * @allow (get, list) Any user can read ranking information.
     * @deny (create, update, delete) No user can create, update, or delete ranking information.
     * @principle Public read access with no client-side writes.
     */
    match /rankings/{rankingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}